package ru.stimmax.cotlincouse.lessons.lesson09

//1.Создайте массив из 5 целых чисел и инициализируйте его значениями от 1 до 5.
fun main() {
    val num1 = arrayOf(1, 2, 3, 4, 5)

    //Создайте пустой массив строк размером 10 элементов.

    val num2 = Array(10){ "" }

// Создайте массив из 5 элементов типа Double и заполните его значениями,
// являющимися удвоенным индексом элемента.
    val num3 = arrayOf(0.0, 2.0, 4.0, 6.0, 8.0)

// Создайте массив из 5 элементов типа Int. Используйте цикл, чтобы присвоить каждому элементу значение,
// равное его индексу, умноженному на 3.

    val num4 = IntArray(5)
    for (index in num4.indices) {
        num4[index] = index * 3
    }
    println(num4.contentToString())

// Создайте массив из 3 nullable строк. Инициализируйте его одним null значением и двумя строками.

    val num5 = arrayOfNulls<String>(3)
    for (i in num5.indices) {
        num5[i] = when(i) {
            0 -> null
            1 -> " "
            2 -> " "
            else -> null
        }

    }
    println(num5.contentToString())


// Создайте массив целых чисел и скопируйте его в новый массив в цикле.
    val num7 = arrayOf(1, 2, 3, 4)// исходный массив целых чисел
    val num8 = IntArray(4)  // создаём новый массив такого же размера
    for (i in num7.indices) { // говорим пройдись по индексам num7 и запиши в i
        num8[i] = num7[i] // говорим, что значение ячейки под индексом i в num8 равно значению ячейки под индексом i в num7
    }
    println(num8.contentToString())


// Создайте два массива целых чисел одинаковой длины. Создайте третий массив, вычев значения одного из другого.
// Распечатайте полученные значения.
    val num9 = arrayOf(10, 20, 30, 40) // создали 1 массив целых чисел и инициализировали его
    val num10 = arrayOf(5, 10, 15, 20) // создали 2 массив целых чисел и инициализировали его
    val num11 = IntArray(num9.size) // Создали пустой массив из целых чисел с длинной как у num9
    for (i in num11.indices) { // говорим пройдись по индексам элементов из массива num11
        num11[i] = num9[i] - num10[i] // говорим, что значение элемента num11 с индексом i равно
        // разнице значений элементов num9 - num10 с индексом i
    }
    println(num11.contentToString())


// Создайте массив целых чисел. Найдите индекс элемента со значением 5.
// Если значения 5 нет в массиве, печатаем -1. Реши задачу через цикл while.

    val num12 = arrayOf(1, 4, 7, 9, 15)
    var result = -1 // переменная для результата, -1 если элемент не найден
    var counter = 0 // счётчик текущего индекса
    while (counter < num12.size) {
        if (num12[counter] == 5) { // проверяем элемент массива по индексу counter
            result = counter      // если элемент равен 5, записываем индекс в result
            break                 // выход из цикла, элемент найден
        }
        counter++                // увеличиваем счётчик, переходим к следующему индексу
    }
    println(result)              // выводим либо индекс найденного элемента, либо -1


// Создайте массив целых чисел. Используйте цикл для перебора массива и вывода каждого элемента в консоль.
// Напротив каждого элемента должно быть написано “чётное” или “нечётное”.

    val num13 = arrayOf(1, 2, 5, 8, 10)
    for (i in num13) {
        if (i % 2 == 0 ) {
            println("$i четное")
        } else {
            println("$i нечетное")
        }

    }


    // Создай функцию, которая принимает массив строк и строку для поиска.
// Функция должна находить в массиве элемент, в котором принятая строка является подстрокой
// (метод contains()). Распечатай найденный элемент.
    val element = arrayOf("apple", "banana", "cherry", "date")
    selectString(element, "nans")


//Работа со списками List
//1. Создайте пустой неизменяемый список целых чисел.
    val list1: List<Int> = listOf()
// 2. Создайте неизменяемый список строк, содержащий три элемента (например, "Hello", "World", "Kotlin").
    val list2 = listOf("Hello", "World", "Kotlin")
// 3. Создайте изменяемый список целых чисел и инициализируйте его значениями от 1 до 5
    val list3 = mutableListOf(1, 2, 3, 4, 5)
// 4. Имея изменяемый список целых чисел, добавьте в него новые элементы (например, 6, 7, 8).
    list3.add(6)
    list3.add(7)
    list3.add(8)
    println(list3)
// 5. Имея изменяемый список строк, удалите из него определенный элемент (например, "World").
    val list4 = mutableListOf("Hello", "World", "Kotlin")
    list4.remove("World")
    println(list4)
// 6. Создайте список целых чисел и используйте цикл для вывода каждого элемента на экран.
    val list5 = listOf(1, 2, 3, 4, 5)
    for (i in list5) {
        println(i)
    }

// 7. Создайте список строк и получите из него второй элемент, используя его индекс.
    val list6 = listOf("Hello", "World", "Kotlin")
    println(list6[1])
// 8. Имея изменяемый список чисел, измените значение элемента на определенной позиции
// (например, замените элемент с индексом 2 на новое значение).
    val list7 = mutableListOf(1, 2, 3, 4, 5)
    list7[2] = 10
    println(list7)

// 9. Создайте два списка строк и объедините их в один новый список, содержащий элементы обоих списков.
// Реши задачу с помощью циклов.
    val list8 = listOf("Hello", "World", "Kotlin")
    val list9 = listOf("My", "Name", "Evgeny")
    val list10 = mutableListOf("")
    for (item1 in list8) {
        list10.add(item1)
    }
    for (item2 in list9) {
        list10.add(item2)
    }
    println(list10)

// 10. Создайте список целых чисел и найдите в нем минимальный и максимальный элементы используя цикл.
    val list11 = listOf(1, 7, 10, 27, -5)
    var min = list11[0]
    var max = list11[0]
    for (num in list11){
        if (num < min) {
            min = num
        }
        if (num > max) {
            max = num
        }
        println(max)
        println(min)
    }

// 11. Имея список целых чисел, создайте новый список,
// содержащий только четные числа из исходного списка используя цикл.
    val list12 = listOf(1, 5, 55, 66, 88, 65, 100)
    val list13 = mutableListOf<Int>()
    for (i in list12) {
        if (i % 2 == 0) {
            list13.add(i)
        }
    }
    println(list13)

// Работа с Множествами Set

//1. Создайте пустое неизменяемое множество целых чисел.
    val set1 = emptySet<Int>()
//2. Создайте неизменяемое множество целых чисел, содержащее три различных элемента (например, 1, 2, 3).
    val set2 = setOf(1, 2, 3)
//3. Создайте изменяемое множество строк и инициализируйте его несколькими значениями (например, "Kotlin", "Java", "Scala").
    val set3 = mutableSetOf("Kotlin", "Java", "Scala")
//4.Имея изменяемое множество строк, добавьте в него новые элементы (например, "Swift", "Go").
    set3.add("Swift")
    set3.add("Go")
    println(set3)
//5. Имея изменяемое множество целых чисел, удалите из него определенный элемент (например, 2).
    val set4 = mutableSetOf(1, 2, 3, 4, 5)
    set4.remove(2)
    println(set4)
//6. Создайте множество целых чисел и используйте цикл для вывода каждого элемента на экран.
    val set5 = setOf(1, 2, 3)
    for (i in set5) {
        println(i)
    }
// 7. Создай функцию, которая принимает множество строк (set) и строку и проверяет,
// есть ли в множестве указанная строка.
// Нужно распечатать булево значение true если строка есть. Реши задачу через цикл.
    val set6 = setOf("apple", "banana", "cherry")
    selectSet(set6, "rry")

//8. Создайте неизменяемое множество строк и
// конвертируйте его в изменяемый список строк с использованием цикла.
    val set7 = setOf("K", "O", "T", "L", "I", "N")
    val set8 = mutableSetOf<String>()
    for (i in set7) {
        set8.add(i)
    }
    println(set8)
}



// Создай функцию, которая принимает массив строк и строку для поиска.
// Функция должна находить в массиве элемент, в котором принятая строка является подстрокой
// (метод contains()). Распечатай найденный элемент.

  fun selectString(text: Array<String>, texts: String) {
      for (i in text) {
          if (i.contains(texts, true)) { // если в элемент из массива входит строка которая, лежит в texts
              println(i) // выводим элемент массива
              return // заканчиваем функцию если нашлось совпадение
          }
      }
      println("Элемент не найден") // если цикл не сработал выводим эту фразу

  }

// 7. Создай функцию, которая принимает множество строк (set) и строку и проверяет,
// есть ли в множестве указанная строка.
// Нужно распечатать булево значение true если строка есть. Реши задачу через цикл.
   fun selectSet(set: Set<String>, text1: String) {
       for (i in set){
           if (i.equals(text1)) {
               println(true)
               return
           }

       }
    println(false)
   }






















