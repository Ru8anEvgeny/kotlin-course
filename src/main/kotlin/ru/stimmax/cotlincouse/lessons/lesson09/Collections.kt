package ru.stimmax.cotlincouse.lessons.lesson09

fun main() {
    // массив - упорядоченные коллекции фиксированного размера содержащие элементы одного типа
    // у каждого элемента массива есть свой порядковый номер называется индекс, начинается с 0

    val num1: Array<Int> = arrayOf(1, 2, 3, 4, 5)
    // arrayOf - функция, которая создает массив из кол-ва элементов в скобках и заполняет его значением
    // этих элементов

    // массивы специфичные для примитивных типов
    val num2: DoubleArray = doubleArrayOf(1.1, 2.2, 3.3)
    // для всех примитивных типов есть свои типа например DoubleArray, IntArray  и тд



    // cоздание пустого массива
    val num3 = Array(5) { "" }
    // обращаемся к классу Array далее вызываем конструктор и передаем в него кол-во элементов массива ()
    // {} - лямбда выражения.


    // функция, которая создает массив заполненный налами
    val num4 = arrayOfNulls<Int>(5)

    // массив следует использовать когда список должен быть Изменяемым и фиксированного размера.







    // списки - это производные от массивов.

    val num5: List<String> = listOf("a" , "b", "c")
    // Создали список стрингов. listOf неизменяемый список, не можем удалить или добавить или заменять эл списка

    val num6: MutableList<String> = mutableListOf("a", "b", "c")
    // Создали список стрингов - изменяемый. Можем удалить или добавить или заменять эл списка




    // Изменение содержимого изменяемых списков и массивов
    num1[0] = 10 // у массива num1 изменили значение элемента под индексом 0 со значения 1 на 10

    num6.add("d")// добавили новый элемент в изменяемый список num6

    num6.removeAt(0) // удалили элемент списка num6 под индексом 0

    num6[0] = "e" // заменили элемент списка num6 под индексом 0 с, а на е

    num6.remove("c") // найдет первый элемент списка num6 со значением с и удалит его

    num6.add(1, "m") // найдет ячейку списка num6 с индексом 1 и в нее добавит элемент "m"
    // а тот элемент, который находился под индексом 1 сместит вправо



    // Множества Set - это такие коллекции которые хранят только уникальные значения. Его можно использовать когда нужно избавиться от дубликатов
    // В множествах нет понятия индекса, нельзя получать элементы по нему

    val num7 = setOf(1, 2, 3, 4) // неизменяемое множество

    val num8 = mutableSetOf(1, 2, 3, 4) // изменяемое множество

    val num9 = emptySet<Int>() // метод создания пустого неизменяемого множества

    val num10 = mutableSetOf<Int>() // метод создания пустого изменяемого множества

    num8.add(6) // добавили элемент 6 в множество num8

    num8.remove(1) // метод, который найдет элемент 1 и удалит его из множества




    // Способы перебора данных
    val set = setOf("K", "O", "T", "L", "I", "N") // создали множество
    for (letter in set) { // создали цикл в котором создали переменную letter которая проходится по множеству set
        println("| $letter |")
    }

    // перебор через индексы
    val list = listOf(32, 33, 276) // создали список list
    for (index in list.indices) // Создали цикл в котором создали переменную index которая проходится по
// индексам списка list. В index по очереди будет присвоено значения индексов каждого элемента из списка
    { if (index == list.lastIndex) {
        println(list[index] + list[0])
    } else {
        println(list[index] + list[index + 1])
    }

    }












}