package ru.stimmax.cotlincouse.lessons.lesson03.homework

import kotlin.properties.Delegates

//1. Название мероприятия
val name: String = "Hackaton"

//2. Дата проведения
var data: String = "15 November"

//3. Место проведения
var location: String = "Moscow"

//4. Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы.
private val budget: String = "подробная информация с перечислением поставщиков и сумм для внутреннего пользования"

//5. Количество участников
var participants: Int = 0

//6. Длительность хакатона
lateinit var duration: String

//7. Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.
private  val supplierAgreementContacts: String by lazy {
    ""
}
//8. Текущее состояние хакатона (статус)
var status: Boolean = true

//9. Список спонсоров
private val sponsors: String by lazy {
    "Список спонсоров"
}

//10. Бюджет мероприятия
private val eventBudget: Int = 1000000

//11.Текущий уровень доступа к интернету
lateinit var currentInternetAccess: String

//12. Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.
private val logisticsInfo: String by lazy {
    "Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки."
}

//13.Количество команд
val teamCount: Int = 10

//14.Перечень задач
val tasks: String = "Перечень задач"

//15.План эвакуации
val evacuationPlan: String by lazy {
    "План эвакуации"
}

//16.Список доступного оборудования (всё, что выделено для использования на мероприятии)
val equipmentForEvent: String = "Список доступного оборудования"

//17.Список свободного оборудования (всё, что можно взять прямо сейчас и что не занято другими участниками)
lateinit var availableEquipmentList: String

//18.График питания участников (зависит от поставщика питания, определяемого за неделю до начала)
var eventMealPlan: String = ""
    get() = when (field) {
        "KFC" -> "14.00 - 15.00"
        "DoDo" -> "13.00 - 14.00"
        else -> "Не определено"
    }






//19. План мероприятий на случай сбоев
val contingencyPlan: String by lazy { "План мероприятий на случай сбоев" }

//20.Список экспертов и жюри
val expertsAndJuryList: String = "Список экспертов и жюри"
//21.Политика конфиденциальности
val privacyPolicy: String by lazy { "Политика конфиденциальности" }

//22.Приватные отзывы (фидбэк) участников и зрителей для анализа проблем
private lateinit var privateFeedback: String

//23. Текущая температура в помещении
lateinit var temperatureNow: String

//24.Данные мониторинга и анализ производительности сетевого оборудования и интернет-соединения для целей отладки своих приложений командами
lateinit var teamNetworkMonitoring: String

//25. Регулятор скорости интернета (понижающий коэффициент, например 0.5)
val internetSpeedRegulator: Double = 0.5

//26. Уровень освещения
lateinit var lightingLevel: String

//27. Лог событий мероприятия
private lateinit var eventHistory: String
//28.Возможность получения медицинской помощи прямо на мероприятии (да/нет)
var medicalAidAvailable: Boolean = true

//29. Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.
private val eventSafetyPlan: String by lazy { "Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций." }

//30. Регистрационный номер мероприятия
const val registrationId: Int = 12345

//31.Максимально допустимый уровень шума в помещении хакатона.
const val maxNoiseLevel: String = "12DC"

//32.Индикатор превышения уровня шума в помещениях (превышен или не превышен в данный момент)
var noiseLevelAlert: Boolean = false


//33. План взаимодействия с прессой
private val pressInteractionPlan: String by lazy { "План взаимодействия с прессой" }

//34. Детальная публичная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.
lateinit var teamProjectDetails: String

//35. Статус получения всех необходимых разрешений для проведения мероприятия
val approvalStatus: Boolean = true

//36. Индикатор доступности специализированного оборудования в данный момент (например, специальному оборудованию)
var isSpecialEquipmentAvailable: Boolean = true
//37. Список партнеров мероприятия
private val partnersList: String by lazy { "Список партнеров мероприятия" }

//38. Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.
val postEventReport: String by lazy { "Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия." }
//39. Внутренние правила распределения призов
private val internalPrizePolicy: String by lazy { "Внутренние правила распределения призов" }
//40. Список разыгрываемых призов
val prizeList: String = "Список разыгрываемых призов"

//41. Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования.
private val internalCriticalContacts: String by lazy { "Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования." }

//42. Особые условия для участников с ограниченными возможностями
val specialNeedsConditions: String by lazy { "Особые условия для участников с ограниченными возможностями" }
// 43. Общее настроение участников (определяется опросами)
lateinit var  overallMood: String
//44. Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия, так как зависит от фактического состава команд и взятых в работу задач.
val hackathonAgenda: String = "Подробный план хакатона"

// 45. Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия, но в момент инициализации неизвестно.
val specialGuestName: String by lazy { "Имя знаменитого специального гостя" }

//46. Максимальное количество людей, которое может вместить место проведения
val maxVenueCapacity: Int = 100

//47. Количество часов, отведенное каждой команде для работы над проектом.
val teamWorkHours: Int = 16
